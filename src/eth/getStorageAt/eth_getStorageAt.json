{"name":"eth_getStorageAt","summary":"Returns the value from a storage position at a given address.","params":[{"name":"Address","required":true,"schema":{"title":"hex encoded address","type":"string","pattern":"^0x[0-9a-fA-F]{40}$"}},{"name":"Storage slot","required":true,"schema":{"title":"32 hex encoded bytes","type":"string","pattern":"^0x[0-9a-f]{0,64}$"}},{"name":"Block","required":true,"schema":{"title":"Block number, tag, or block hash","anyOf":[{"title":"Block number","type":"string","pattern":"^0x(0|[1-9a-f][0-9a-f]*)$"},{"title":"Block tag","type":"string","enum":["earliest","finalized","safe","latest","pending"],"description":"`earliest`: The lowest numbered block the client has available; `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination; `safe`: The most recent block that is safe from re-orgs under honest majority and certain synchronicity assumptions; `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions; `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. Before the merge transition is finalized, any call querying for `finalized` or `safe` block MUST be responded to with `-39001: Unknown block` error"},{"title":"Block hash","type":"string","pattern":"^0x[0-9a-f]{64}$"}]}}],"result":{"name":"Value","schema":{"title":"hex encoded bytes","type":"string","pattern":"^0x[0-9a-f]*$"}},"examples":[{"name":"eth_getStorageAt example","params":[{"name":"Address","value":"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73"},{"name":"Storage slot","value":"0x0"},{"name":"Block","value":"latest"}],"result":{"name":"Value","value":"0x0000000000000000000000000000000000000000000000000000000000000000"}}]}